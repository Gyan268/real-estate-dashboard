// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: real_estate.proto

#include "real_estate.pb.h"
#include "real_estate.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace realestate {

static const char* RealEstateService_method_names[] = {
  "/realestate.RealEstateService/StreamPropertyListings",
  "/realestate.RealEstateService/StreamPropertyUpdates",
};

std::unique_ptr< RealEstateService::Stub> RealEstateService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RealEstateService::Stub> stub(new RealEstateService::Stub(channel, options));
  return stub;
}

RealEstateService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_StreamPropertyListings_(RealEstateService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_StreamPropertyUpdates_(RealEstateService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::ClientReader< ::realestate::Property>* RealEstateService::Stub::StreamPropertyListingsRaw(::grpc::ClientContext* context, const ::realestate::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::realestate::Property>::Create(channel_.get(), rpcmethod_StreamPropertyListings_, context, request);
}

void RealEstateService::Stub::async::StreamPropertyListings(::grpc::ClientContext* context, const ::realestate::Empty* request, ::grpc::ClientReadReactor< ::realestate::Property>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::realestate::Property>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPropertyListings_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::realestate::Property>* RealEstateService::Stub::AsyncStreamPropertyListingsRaw(::grpc::ClientContext* context, const ::realestate::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::realestate::Property>::Create(channel_.get(), cq, rpcmethod_StreamPropertyListings_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::realestate::Property>* RealEstateService::Stub::PrepareAsyncStreamPropertyListingsRaw(::grpc::ClientContext* context, const ::realestate::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::realestate::Property>::Create(channel_.get(), cq, rpcmethod_StreamPropertyListings_, context, request, false, nullptr);
}

::grpc::ClientReader< ::realestate::PropertyUpdate>* RealEstateService::Stub::StreamPropertyUpdatesRaw(::grpc::ClientContext* context, const ::realestate::Empty& request) {
  return ::grpc::internal::ClientReaderFactory< ::realestate::PropertyUpdate>::Create(channel_.get(), rpcmethod_StreamPropertyUpdates_, context, request);
}

void RealEstateService::Stub::async::StreamPropertyUpdates(::grpc::ClientContext* context, const ::realestate::Empty* request, ::grpc::ClientReadReactor< ::realestate::PropertyUpdate>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::realestate::PropertyUpdate>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamPropertyUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::realestate::PropertyUpdate>* RealEstateService::Stub::AsyncStreamPropertyUpdatesRaw(::grpc::ClientContext* context, const ::realestate::Empty& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::realestate::PropertyUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPropertyUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::realestate::PropertyUpdate>* RealEstateService::Stub::PrepareAsyncStreamPropertyUpdatesRaw(::grpc::ClientContext* context, const ::realestate::Empty& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::realestate::PropertyUpdate>::Create(channel_.get(), cq, rpcmethod_StreamPropertyUpdates_, context, request, false, nullptr);
}

RealEstateService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RealEstateService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RealEstateService::Service, ::realestate::Empty, ::realestate::Property>(
          [](RealEstateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::realestate::Empty* req,
             ::grpc::ServerWriter<::realestate::Property>* writer) {
               return service->StreamPropertyListings(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RealEstateService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RealEstateService::Service, ::realestate::Empty, ::realestate::PropertyUpdate>(
          [](RealEstateService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::realestate::Empty* req,
             ::grpc::ServerWriter<::realestate::PropertyUpdate>* writer) {
               return service->StreamPropertyUpdates(ctx, req, writer);
             }, this)));
}

RealEstateService::Service::~Service() {
}

::grpc::Status RealEstateService::Service::StreamPropertyListings(::grpc::ServerContext* context, const ::realestate::Empty* request, ::grpc::ServerWriter< ::realestate::Property>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RealEstateService::Service::StreamPropertyUpdates(::grpc::ServerContext* context, const ::realestate::Empty* request, ::grpc::ServerWriter< ::realestate::PropertyUpdate>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace realestate

