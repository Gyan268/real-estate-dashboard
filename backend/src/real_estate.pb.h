// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: real_estate.proto
// Protobuf C++ Version: 5.29.3

#ifndef real_5festate_2eproto_2epb_2eh
#define real_5festate_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_real_5festate_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_real_5festate_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_real_5festate_2eproto;
namespace realestate {
class Empty;
struct EmptyDefaultTypeInternal;
extern EmptyDefaultTypeInternal _Empty_default_instance_;
class Property;
struct PropertyDefaultTypeInternal;
extern PropertyDefaultTypeInternal _Property_default_instance_;
class PropertyUpdate;
struct PropertyUpdateDefaultTypeInternal;
extern PropertyUpdateDefaultTypeInternal _PropertyUpdate_default_instance_;
}  // namespace realestate
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace realestate {

// ===================================================================


// -------------------------------------------------------------------

class PropertyUpdate final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:realestate.PropertyUpdate) */ {
 public:
  inline PropertyUpdate() : PropertyUpdate(nullptr) {}
  ~PropertyUpdate() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(PropertyUpdate* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(PropertyUpdate));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR PropertyUpdate(
      ::google::protobuf::internal::ConstantInitialized);

  inline PropertyUpdate(const PropertyUpdate& from) : PropertyUpdate(nullptr, from) {}
  inline PropertyUpdate(PropertyUpdate&& from) noexcept
      : PropertyUpdate(nullptr, std::move(from)) {}
  inline PropertyUpdate& operator=(const PropertyUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyUpdate& operator=(PropertyUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyUpdate* internal_default_instance() {
    return reinterpret_cast<const PropertyUpdate*>(
        &_PropertyUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(PropertyUpdate& a, PropertyUpdate& b) { a.Swap(&b); }
  inline void Swap(PropertyUpdate* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyUpdate* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PropertyUpdate* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<PropertyUpdate>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const PropertyUpdate& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const PropertyUpdate& from) { PropertyUpdate::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(PropertyUpdate* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "realestate.PropertyUpdate"; }

 protected:
  explicit PropertyUpdate(::google::protobuf::Arena* arena);
  PropertyUpdate(::google::protobuf::Arena* arena, const PropertyUpdate& from);
  PropertyUpdate(::google::protobuf::Arena* arena, PropertyUpdate&& from) noexcept
      : PropertyUpdate(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 3,
    kPriceFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // double price = 2;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:realestate.PropertyUpdate)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      40, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const PropertyUpdate& from_msg);
    ::google::protobuf::internal::ArenaStringPtr status_;
    double price_;
    ::int32_t id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_real_5festate_2eproto;
};
// -------------------------------------------------------------------

class Property final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:realestate.Property) */ {
 public:
  inline Property() : Property(nullptr) {}
  ~Property() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Property* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Property));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Property(
      ::google::protobuf::internal::ConstantInitialized);

  inline Property(const Property& from) : Property(nullptr, from) {}
  inline Property(Property&& from) noexcept
      : Property(nullptr, std::move(from)) {}
  inline Property& operator=(const Property& from) {
    CopyFrom(from);
    return *this;
  }
  inline Property& operator=(Property&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Property& default_instance() {
    return *internal_default_instance();
  }
  static inline const Property* internal_default_instance() {
    return reinterpret_cast<const Property*>(
        &_Property_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(Property& a, Property& b) { a.Swap(&b); }
  inline void Swap(Property* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Property* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Property* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Property>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Property& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Property& from) { Property::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Property* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "realestate.Property"; }

 protected:
  explicit Property(::google::protobuf::Arena* arena);
  Property(::google::protobuf::Arena* arena, const Property& from);
  Property(::google::protobuf::Arena* arena, Property&& from) noexcept
      : Property(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBrokeredByFieldNumber = 2,
    kStatusFieldNumber = 3,
    kStreetFieldNumber = 8,
    kCityFieldNumber = 9,
    kStateFieldNumber = 10,
    kZipCodeFieldNumber = 11,
    kPrevSoldDateFieldNumber = 13,
    kIdFieldNumber = 1,
    kBedroomsFieldNumber = 5,
    kPriceFieldNumber = 4,
    kAcreLotFieldNumber = 7,
    kHouseSizeFieldNumber = 12,
    kBathroomsFieldNumber = 6,
  };
  // string brokered_by = 2;
  void clear_brokered_by() ;
  const std::string& brokered_by() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_brokered_by(Arg_&& arg, Args_... args);
  std::string* mutable_brokered_by();
  PROTOBUF_NODISCARD std::string* release_brokered_by();
  void set_allocated_brokered_by(std::string* value);

  private:
  const std::string& _internal_brokered_by() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_brokered_by(
      const std::string& value);
  std::string* _internal_mutable_brokered_by();

  public:
  // string status = 3;
  void clear_status() ;
  const std::string& status() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_status(Arg_&& arg, Args_... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* value);

  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(
      const std::string& value);
  std::string* _internal_mutable_status();

  public:
  // string street = 8;
  void clear_street() ;
  const std::string& street() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_street(Arg_&& arg, Args_... args);
  std::string* mutable_street();
  PROTOBUF_NODISCARD std::string* release_street();
  void set_allocated_street(std::string* value);

  private:
  const std::string& _internal_street() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_street(
      const std::string& value);
  std::string* _internal_mutable_street();

  public:
  // string city = 9;
  void clear_city() ;
  const std::string& city() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_city(Arg_&& arg, Args_... args);
  std::string* mutable_city();
  PROTOBUF_NODISCARD std::string* release_city();
  void set_allocated_city(std::string* value);

  private:
  const std::string& _internal_city() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_city(
      const std::string& value);
  std::string* _internal_mutable_city();

  public:
  // string state = 10;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string zip_code = 11;
  void clear_zip_code() ;
  const std::string& zip_code() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_zip_code(Arg_&& arg, Args_... args);
  std::string* mutable_zip_code();
  PROTOBUF_NODISCARD std::string* release_zip_code();
  void set_allocated_zip_code(std::string* value);

  private:
  const std::string& _internal_zip_code() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zip_code(
      const std::string& value);
  std::string* _internal_mutable_zip_code();

  public:
  // string prev_sold_date = 13;
  void clear_prev_sold_date() ;
  const std::string& prev_sold_date() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_prev_sold_date(Arg_&& arg, Args_... args);
  std::string* mutable_prev_sold_date();
  PROTOBUF_NODISCARD std::string* release_prev_sold_date();
  void set_allocated_prev_sold_date(std::string* value);

  private:
  const std::string& _internal_prev_sold_date() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prev_sold_date(
      const std::string& value);
  std::string* _internal_mutable_prev_sold_date();

  public:
  // int32 id = 1;
  void clear_id() ;
  ::int32_t id() const;
  void set_id(::int32_t value);

  private:
  ::int32_t _internal_id() const;
  void _internal_set_id(::int32_t value);

  public:
  // int32 bedrooms = 5;
  void clear_bedrooms() ;
  ::int32_t bedrooms() const;
  void set_bedrooms(::int32_t value);

  private:
  ::int32_t _internal_bedrooms() const;
  void _internal_set_bedrooms(::int32_t value);

  public:
  // double price = 4;
  void clear_price() ;
  double price() const;
  void set_price(double value);

  private:
  double _internal_price() const;
  void _internal_set_price(double value);

  public:
  // double acre_lot = 7;
  void clear_acre_lot() ;
  double acre_lot() const;
  void set_acre_lot(double value);

  private:
  double _internal_acre_lot() const;
  void _internal_set_acre_lot(double value);

  public:
  // double house_size = 12;
  void clear_house_size() ;
  double house_size() const;
  void set_house_size(double value);

  private:
  double _internal_house_size() const;
  void _internal_set_house_size(double value);

  public:
  // int32 bathrooms = 6;
  void clear_bathrooms() ;
  ::int32_t bathrooms() const;
  void set_bathrooms(::int32_t value);

  private:
  ::int32_t _internal_bathrooms() const;
  void _internal_set_bathrooms(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:realestate.Property)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 13, 0,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Property& from_msg);
    ::google::protobuf::internal::ArenaStringPtr brokered_by_;
    ::google::protobuf::internal::ArenaStringPtr status_;
    ::google::protobuf::internal::ArenaStringPtr street_;
    ::google::protobuf::internal::ArenaStringPtr city_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr zip_code_;
    ::google::protobuf::internal::ArenaStringPtr prev_sold_date_;
    ::int32_t id_;
    ::int32_t bedrooms_;
    double price_;
    double acre_lot_;
    double house_size_;
    ::int32_t bathrooms_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_real_5festate_2eproto;
};
// -------------------------------------------------------------------

class Empty final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:realestate.Empty) */ {
 public:
  inline Empty() : Empty(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Empty* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Empty));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Empty(
      ::google::protobuf::internal::ConstantInitialized);

  inline Empty(const Empty& from) : Empty(nullptr, from) {}
  inline Empty(Empty&& from) noexcept
      : Empty(nullptr, std::move(from)) {}
  inline Empty& operator=(const Empty& from) {
    CopyFrom(from);
    return *this;
  }
  inline Empty& operator=(Empty&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Empty& default_instance() {
    return *internal_default_instance();
  }
  static inline const Empty* internal_default_instance() {
    return reinterpret_cast<const Empty*>(
        &_Empty_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Empty& a, Empty& b) { a.Swap(&b); }
  inline void Swap(Empty* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Empty* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Empty* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<Empty>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Empty& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "realestate.Empty"; }

 protected:
  explicit Empty(::google::protobuf::Arena* arena);
  Empty(::google::protobuf::Arena* arena, const Empty& from);
  Empty(::google::protobuf::Arena* arena, Empty&& from) noexcept
      : Empty(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:realestate.Empty)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Empty& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_real_5festate_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Property

// int32 id = 1;
inline void Property::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t Property::id() const {
  // @@protoc_insertion_point(field_get:realestate.Property.id)
  return _internal_id();
}
inline void Property::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:realestate.Property.id)
}
inline ::int32_t Property::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void Property::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// string brokered_by = 2;
inline void Property::clear_brokered_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brokered_by_.ClearToEmpty();
}
inline const std::string& Property::brokered_by() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.brokered_by)
  return _internal_brokered_by();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_brokered_by(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brokered_by_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.brokered_by)
}
inline std::string* Property::mutable_brokered_by() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_brokered_by();
  // @@protoc_insertion_point(field_mutable:realestate.Property.brokered_by)
  return _s;
}
inline const std::string& Property::_internal_brokered_by() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.brokered_by_.Get();
}
inline void Property::_internal_set_brokered_by(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brokered_by_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_brokered_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.brokered_by_.Mutable( GetArena());
}
inline std::string* Property::release_brokered_by() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.brokered_by)
  return _impl_.brokered_by_.Release();
}
inline void Property::set_allocated_brokered_by(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.brokered_by_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.brokered_by_.IsDefault()) {
    _impl_.brokered_by_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.brokered_by)
}

// string status = 3;
inline void Property::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& Property::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.status)
}
inline std::string* Property::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:realestate.Property.status)
  return _s;
}
inline const std::string& Property::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void Property::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* Property::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.status)
  return _impl_.status_.Release();
}
inline void Property::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.status)
}

// double price = 4;
inline void Property::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double Property::price() const {
  // @@protoc_insertion_point(field_get:realestate.Property.price)
  return _internal_price();
}
inline void Property::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:realestate.Property.price)
}
inline double Property::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void Property::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// int32 bedrooms = 5;
inline void Property::clear_bedrooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bedrooms_ = 0;
}
inline ::int32_t Property::bedrooms() const {
  // @@protoc_insertion_point(field_get:realestate.Property.bedrooms)
  return _internal_bedrooms();
}
inline void Property::set_bedrooms(::int32_t value) {
  _internal_set_bedrooms(value);
  // @@protoc_insertion_point(field_set:realestate.Property.bedrooms)
}
inline ::int32_t Property::_internal_bedrooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bedrooms_;
}
inline void Property::_internal_set_bedrooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bedrooms_ = value;
}

// int32 bathrooms = 6;
inline void Property::clear_bathrooms() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bathrooms_ = 0;
}
inline ::int32_t Property::bathrooms() const {
  // @@protoc_insertion_point(field_get:realestate.Property.bathrooms)
  return _internal_bathrooms();
}
inline void Property::set_bathrooms(::int32_t value) {
  _internal_set_bathrooms(value);
  // @@protoc_insertion_point(field_set:realestate.Property.bathrooms)
}
inline ::int32_t Property::_internal_bathrooms() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bathrooms_;
}
inline void Property::_internal_set_bathrooms(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bathrooms_ = value;
}

// double acre_lot = 7;
inline void Property::clear_acre_lot() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acre_lot_ = 0;
}
inline double Property::acre_lot() const {
  // @@protoc_insertion_point(field_get:realestate.Property.acre_lot)
  return _internal_acre_lot();
}
inline void Property::set_acre_lot(double value) {
  _internal_set_acre_lot(value);
  // @@protoc_insertion_point(field_set:realestate.Property.acre_lot)
}
inline double Property::_internal_acre_lot() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.acre_lot_;
}
inline void Property::_internal_set_acre_lot(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.acre_lot_ = value;
}

// string street = 8;
inline void Property::clear_street() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.street_.ClearToEmpty();
}
inline const std::string& Property::street() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.street)
  return _internal_street();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_street(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.street_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.street)
}
inline std::string* Property::mutable_street() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_street();
  // @@protoc_insertion_point(field_mutable:realestate.Property.street)
  return _s;
}
inline const std::string& Property::_internal_street() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.street_.Get();
}
inline void Property::_internal_set_street(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.street_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_street() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.street_.Mutable( GetArena());
}
inline std::string* Property::release_street() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.street)
  return _impl_.street_.Release();
}
inline void Property::set_allocated_street(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.street_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.street_.IsDefault()) {
    _impl_.street_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.street)
}

// string city = 9;
inline void Property::clear_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.ClearToEmpty();
}
inline const std::string& Property::city() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.city)
  return _internal_city();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_city(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.city)
}
inline std::string* Property::mutable_city() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_city();
  // @@protoc_insertion_point(field_mutable:realestate.Property.city)
  return _s;
}
inline const std::string& Property::_internal_city() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.city_.Get();
}
inline void Property::_internal_set_city(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.city_.Mutable( GetArena());
}
inline std::string* Property::release_city() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.city)
  return _impl_.city_.Release();
}
inline void Property::set_allocated_city(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.city_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.city_.IsDefault()) {
    _impl_.city_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.city)
}

// string state = 10;
inline void Property::clear_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& Property::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_state(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.state)
}
inline std::string* Property::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:realestate.Property.state)
  return _s;
}
inline const std::string& Property::_internal_state() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.state_.Get();
}
inline void Property::_internal_set_state(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* Property::release_state() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.state)
  return _impl_.state_.Release();
}
inline void Property::set_allocated_state(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.state_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.state_.IsDefault()) {
    _impl_.state_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.state)
}

// string zip_code = 11;
inline void Property::clear_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.ClearToEmpty();
}
inline const std::string& Property::zip_code() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.zip_code)
  return _internal_zip_code();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_zip_code(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.zip_code)
}
inline std::string* Property::mutable_zip_code() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_zip_code();
  // @@protoc_insertion_point(field_mutable:realestate.Property.zip_code)
  return _s;
}
inline const std::string& Property::_internal_zip_code() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.zip_code_.Get();
}
inline void Property::_internal_set_zip_code(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.zip_code_.Mutable( GetArena());
}
inline std::string* Property::release_zip_code() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.zip_code)
  return _impl_.zip_code_.Release();
}
inline void Property::set_allocated_zip_code(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.zip_code_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.zip_code_.IsDefault()) {
    _impl_.zip_code_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.zip_code)
}

// double house_size = 12;
inline void Property::clear_house_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.house_size_ = 0;
}
inline double Property::house_size() const {
  // @@protoc_insertion_point(field_get:realestate.Property.house_size)
  return _internal_house_size();
}
inline void Property::set_house_size(double value) {
  _internal_set_house_size(value);
  // @@protoc_insertion_point(field_set:realestate.Property.house_size)
}
inline double Property::_internal_house_size() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.house_size_;
}
inline void Property::_internal_set_house_size(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.house_size_ = value;
}

// string prev_sold_date = 13;
inline void Property::clear_prev_sold_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_sold_date_.ClearToEmpty();
}
inline const std::string& Property::prev_sold_date() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.Property.prev_sold_date)
  return _internal_prev_sold_date();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Property::set_prev_sold_date(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_sold_date_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.Property.prev_sold_date)
}
inline std::string* Property::mutable_prev_sold_date() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_prev_sold_date();
  // @@protoc_insertion_point(field_mutable:realestate.Property.prev_sold_date)
  return _s;
}
inline const std::string& Property::_internal_prev_sold_date() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.prev_sold_date_.Get();
}
inline void Property::_internal_set_prev_sold_date(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_sold_date_.Set(value, GetArena());
}
inline std::string* Property::_internal_mutable_prev_sold_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.prev_sold_date_.Mutable( GetArena());
}
inline std::string* Property::release_prev_sold_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.Property.prev_sold_date)
  return _impl_.prev_sold_date_.Release();
}
inline void Property::set_allocated_prev_sold_date(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.prev_sold_date_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.prev_sold_date_.IsDefault()) {
    _impl_.prev_sold_date_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.Property.prev_sold_date)
}

// -------------------------------------------------------------------

// PropertyUpdate

// int32 id = 1;
inline void PropertyUpdate::clear_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = 0;
}
inline ::int32_t PropertyUpdate::id() const {
  // @@protoc_insertion_point(field_get:realestate.PropertyUpdate.id)
  return _internal_id();
}
inline void PropertyUpdate::set_id(::int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:realestate.PropertyUpdate.id)
}
inline ::int32_t PropertyUpdate::_internal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.id_;
}
inline void PropertyUpdate::_internal_set_id(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.id_ = value;
}

// double price = 2;
inline void PropertyUpdate::clear_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = 0;
}
inline double PropertyUpdate::price() const {
  // @@protoc_insertion_point(field_get:realestate.PropertyUpdate.price)
  return _internal_price();
}
inline void PropertyUpdate::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:realestate.PropertyUpdate.price)
}
inline double PropertyUpdate::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.price_;
}
inline void PropertyUpdate::_internal_set_price(double value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.price_ = value;
}

// string status = 3;
inline void PropertyUpdate::clear_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.ClearToEmpty();
}
inline const std::string& PropertyUpdate::status() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:realestate.PropertyUpdate.status)
  return _internal_status();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void PropertyUpdate::set_status(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:realestate.PropertyUpdate.status)
}
inline std::string* PropertyUpdate::mutable_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:realestate.PropertyUpdate.status)
  return _s;
}
inline const std::string& PropertyUpdate::_internal_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.status_.Get();
}
inline void PropertyUpdate::_internal_set_status(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.Set(value, GetArena());
}
inline std::string* PropertyUpdate::_internal_mutable_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.status_.Mutable( GetArena());
}
inline std::string* PropertyUpdate::release_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:realestate.PropertyUpdate.status)
  return _impl_.status_.Release();
}
inline void PropertyUpdate::set_allocated_status(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.status_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.status_.IsDefault()) {
    _impl_.status_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:realestate.PropertyUpdate.status)
}

// -------------------------------------------------------------------

// Empty

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace realestate


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // real_5festate_2eproto_2epb_2eh
